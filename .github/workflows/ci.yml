name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NPM_CONFIG_LEGACY_PEER_DEPS: true

jobs:
  audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if npm ci; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, falling back to npm install"
            npm install
          fi

      - name: Ellipsis check
        run: node scripts/check-ellipsis.mjs

      - name: Run security audit (non-blocking)
        run: |
          if npm audit --audit-level=moderate; then
            echo "No security vulnerabilities found"
          else
            echo "Security vulnerabilities detected, but continuing..."
          fi
        continue-on-error: true

      - name: Check for outdated packages
        run: npm outdated --depth=0 || echo "Some packages are outdated"

      - name: License check (if available)
        run: |
          if npx license-checker --version >/dev/null 2>&1; then
            npx license-checker --summary
          else
            echo "license-checker not available, skipping"
          fi
        continue-on-error: true

  test:
    name: Test (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    needs: audit
    strategy:
      matrix:
        node: [18, 20, 22]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if npm ci; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, falling back to npm install"
            npm install
          fi

      - name: Run TypeScript check (if available)
        run: |
          if npx tsc --version >/dev/null 2>&1; then
            npx tsc --noEmit
          else
            echo "TypeScript not available, skipping type check"
          fi
        continue-on-error: true

      - name: Run linting (if configured)
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json >/dev/null 2>&1; then
            npm run lint
          else
            echo "ESLint not configured, skipping"
          fi
        continue-on-error: true

      - name: Run Vitest tests
        run: npm run test --if-present
        env:
          NODE_ENV: test

      - name: Upload coverage (if available)
        if: matrix.node == 20 && hashFiles('coverage/lcov.info') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  test-deno:
    name: Test Edge Functions (Deno)
    runs-on: ubuntu-latest
    needs: audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Check for Deno tests
        id: check-deno
        run: |
          if [ -d "supabase/functions" ] && find supabase/functions -name "*test*" -type f | grep -q .; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Deno tests
        if: steps.check-deno.outputs.has-tests == 'true'
        run: |
          cd supabase/functions
          deno test --allow-all --coverage=coverage
        env:
          DENO_ENV: test

      - name: Generate Deno coverage report
        if: steps.check-deno.outputs.has-tests == 'true'
        run: |
          cd supabase/functions
          deno coverage coverage --lcov --output=coverage.lcov || echo "Coverage generation failed"
        continue-on-error: true

      - name: Upload Deno coverage
        if: steps.check-deno.outputs.has-tests == 'true' && hashFiles('supabase/functions/coverage.lcov') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./supabase/functions/coverage.lcov
          flags: edge-functions
          name: edge-functions-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Skip message
        if: steps.check-deno.outputs.has-tests == 'false'
        run: echo "No Deno tests found in supabase/functions, skipping"

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, test-deno]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if npm ci; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, falling back to npm install"
            npm install
          fi

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        run: |
          echo "Build completed successfully"
          if [ -d "dist" ]; then
            echo "Build output:" && ls -la dist/ || true
            echo "Build size:" && du -sh dist/ || true
          else
            echo "No dist directory found"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success() && hashFiles('dist/**/*') != ''
        with:
          name: build-artifacts-node-20
          path: dist/
          retention-days: 7

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if npm ci; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, falling back to npm install"
            npm install
          fi

      - name: Check for smoke test config
        id: check-smoke
        run: |
          if [ -f "vitest.smoke.config.ts" ] || [ -f "vitest.smoke.config.js" ]; then
            echo "has-smoke-tests=true" >> $GITHUB_OUTPUT
          else
            echo "has-smoke-tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Download build artifacts
        if: steps.check-smoke.outputs.has-smoke-tests == 'true'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-node-20
          path: dist/
        continue-on-error: true

      - name: Run smoke tests
        if: steps.check-smoke.outputs.has-smoke-tests == 'true'
        run: |
          if [ -f package.json ] && jq -e '.scripts["test:smoke"]' package.json >/dev/null 2>&1; then
            npm run test:smoke
          else
            # Run directly without script
            npx vitest run --config vitest.smoke.config.ts || (echo "Smoke tests failed" && exit 1)
          fi
        env:
          NODE_ENV: production

      - name: Skip message
        if: steps.check-smoke.outputs.has-smoke-tests == 'false'
        run: echo "No smoke tests configured (vitest.smoke.config.ts not found), skipping"

      - name: Bundle analysis (if available)
        run: |
          if [ -f package.json ] && jq -e '.scripts.analyze' package.json >/dev/null 2>&1; then
            npm run analyze
          else
            echo "Bundle analyzer not configured"
          fi
        continue-on-error: true

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [audit, test, test-deno, build, smoke-tests]
    if: failure()
    steps:
      - name: Send Slack notification
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: "ðŸš¨ ZingLots CI failed on ${{ github.ref }}"
        continue-on-error: true

      - name: Send email notification
        if: secrets.NOTIFICATION_EMAIL != '' && secrets.SMTP_USERNAME != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "ðŸš¨ CI Failed: ZingLots (${{ github.ref }})"
          body: |
            Build failed for ZingLots auction platform

            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}

            Check details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions <noreply@github.com>
        continue-on-error: true

      - name: Console notification
        run: |
          echo "::error::ZingLots CI pipeline failed"
          echo "::notice::Check the job logs above for specific failure details"
          echo "::notice::Configure SLACK_WEBHOOK_URL or NOTIFICATION_EMAIL secrets for external notifications"

  notify-success:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: [audit, test, test-deno, build, smoke-tests]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Send success notification
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#dev-updates'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author
          text: "âœ… ZingLots main branch build successful! Ready for deployment via Lovable."
        continue-on-error: true

      - name: Console success message
        run: |
          echo "::notice::ðŸŽ‰ ZingLots CI pipeline completed successfully!"
          echo "::notice::All tests passed across Node versions 18, 20, and 22"
          echo "::notice::Ready for deployment via Lovable Publish"
